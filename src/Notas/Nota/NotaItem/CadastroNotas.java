/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Notas.Nota.NotaItem;

import DAO.ClienteDAO;
import DAO.FornecedorDAO;
import DAO.NotaDAO;
import DAO.NotaItemDAO;
import DAO.ProdutoDAO;
import Menu.Menu;
import Models.Cliente;
import Models.Fornecedor;
import Models.Nota;
import Models.NotaItem;
import Models.Produto;
import com.itextpdf.text.PageSize;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import com.itextpdf.text.Document;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPCell;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 2830482411045
 */
public class CadastroNotas extends javax.swing.JFrame {

    //para preencher os combos
    private List<Cliente> listaClientes;
    private List<Fornecedor> listaFornecedores;
    private List<Produto> listaProdutos;

    /**
     * Creates new form CadastroNotas
     */
    public CadastroNotas() {
        initComponents();
        ClienteDAO cDAO = new ClienteDAO();
        FornecedorDAO fDAO = new FornecedorDAO();
        ProdutoDAO pDAO = new ProdutoDAO();

        listaClientes = cDAO.listarClientes();
        listaFornecedores = fDAO.listarFornecedores();
        listaProdutos = pDAO.listarProdutos();

        carregarCombo(cmb_Cliente, listaClientes, Cliente::getNome);
        carregarCombo(cmb_Fornecedor, listaFornecedores, Fornecedor::getNome);
        carregarCombo(cmb_Produto, listaProdutos, Produto::getNome);
        verificarTipoNota();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_GrpTipoNota = new javax.swing.ButtonGroup();
        lbl_Titulo = new javax.swing.JLabel();
        btn_Menu = new javax.swing.JButton();
        lbl_Fornecedor = new javax.swing.JLabel();
        lbl_Cliente = new javax.swing.JLabel();
        cmb_Cliente = new javax.swing.JComboBox<>();
        cmb_Fornecedor = new javax.swing.JComboBox<>();
        rbn_Saida = new javax.swing.JRadioButton();
        rbn_Entrada = new javax.swing.JRadioButton();
        lbl_TipoNota = new javax.swing.JLabel();
        lbl_Produto = new javax.swing.JLabel();
        cmb_Produto = new javax.swing.JComboBox<>();
        lbl_QntdVendida = new javax.swing.JLabel();
        txt_Saida = new javax.swing.JTextField();
        lbl_QntdComprada = new javax.swing.JLabel();
        txt_Entrada = new javax.swing.JTextField();
        btn_Cadastrar = new javax.swing.JButton();
        btn_Deletar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_Data = new javax.swing.JTextField();
        btn_DataAtual = new javax.swing.JButton();
        lbl_Estoque = new javax.swing.JLabel();
        txt_Estoque = new javax.swing.JTextField();
        btn_ListarNotas = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_ID = new javax.swing.JTextField();
        btn_Consultar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_NotaID = new javax.swing.JTextField();
        btn_Limpar = new javax.swing.JButton();
        btn_Imprimir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItensNota = new javax.swing.JTable();
        lbl_TituloTable = new javax.swing.JLabel();
        btn_RemoverItem = new javax.swing.JButton();
        btn_AddProduto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_Titulo.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lbl_Titulo.setText("Gerenciar Notas");

        btn_Menu.setText("Voltar");
        btn_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MenuActionPerformed(evt);
            }
        });

        lbl_Fornecedor.setText("Fornecedor");

        lbl_Cliente.setText("Cliente");

        cmb_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmb_Fornecedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_GrpTipoNota.add(rbn_Saida);
        rbn_Saida.setText("Saída");
        rbn_Saida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbn_SaidaActionPerformed(evt);
            }
        });

        btn_GrpTipoNota.add(rbn_Entrada);
        rbn_Entrada.setSelected(true);
        rbn_Entrada.setText("Entrada");
        rbn_Entrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbn_EntradaActionPerformed(evt);
            }
        });

        lbl_TipoNota.setText("Tipo da nota:");

        lbl_Produto.setText("Produto:");

        cmb_Produto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmb_Produto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ProdutoActionPerformed(evt);
            }
        });

        lbl_QntdVendida.setText("Quantdade Vendida");

        lbl_QntdComprada.setText("Quantdade Comprada");

        btn_Cadastrar.setText("Cadastrar");
        btn_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CadastrarActionPerformed(evt);
            }
        });

        btn_Deletar.setText("Deletar");
        btn_Deletar.setEnabled(false);
        btn_Deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeletarActionPerformed(evt);
            }
        });

        jLabel1.setText("Data:");

        btn_DataAtual.setText("Data de hoje?");
        btn_DataAtual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DataAtualActionPerformed(evt);
            }
        });

        lbl_Estoque.setText("Estoque:");

        txt_Estoque.setEditable(false);
        txt_Estoque.setEnabled(false);

        btn_ListarNotas.setText("Listar Notas");
        btn_ListarNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ListarNotasActionPerformed(evt);
            }
        });

        jLabel2.setText("Consulta Código:");

        btn_Consultar.setText("Consultar");
        btn_Consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConsultarActionPerformed(evt);
            }
        });

        jLabel3.setText("Código:");

        txt_NotaID.setEditable(false);
        txt_NotaID.setEnabled(false);

        btn_Limpar.setText("Limpar");
        btn_Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LimparActionPerformed(evt);
            }
        });

        btn_Imprimir.setText("Imprimir");
        btn_Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ImprimirActionPerformed(evt);
            }
        });

        tblItensNota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Valor", "Quantidade"
            }
        ));
        jScrollPane1.setViewportView(tblItensNota);

        lbl_TituloTable.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lbl_TituloTable.setText("Produtos na nota");

        btn_RemoverItem.setBackground(new java.awt.Color(255, 49, 49));
        btn_RemoverItem.setText("Remover Item Selecionado");
        btn_RemoverItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoverItemActionPerformed(evt);
            }
        });

        btn_AddProduto.setText("Adicionar");
        btn_AddProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btn_Menu)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txt_Data, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btn_DataAtual))
                                        .addComponent(btn_Cadastrar)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_QntdComprada)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(lbl_QntdVendida)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_Saida, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbl_Fornecedor)
                                            .addComponent(lbl_Cliente)
                                            .addComponent(lbl_Produto)
                                            .addComponent(jLabel3))
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmb_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lbl_Estoque)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txt_Estoque, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmb_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmb_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_NotaID, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lbl_TipoNota)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rbn_Entrada)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rbn_Saida)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btn_Deletar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Limpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_AddProduto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Imprimir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_ListarNotas)))
                        .addGap(60, 67, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbl_TituloTable)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_Consultar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_RemoverItem))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_Titulo)
                        .addGap(386, 386, 386)))
                .addGap(0, 17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_Titulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(lbl_TituloTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_NotaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Cliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Fornecedor)
                            .addComponent(cmb_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Produto)
                            .addComponent(cmb_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Estoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Estoque))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_TipoNota)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rbn_Entrada)
                                .addComponent(rbn_Saida)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_QntdComprada)
                            .addComponent(lbl_QntdVendida)
                            .addComponent(txt_Saida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Deletar)
                            .addComponent(btn_Limpar)
                            .addComponent(btn_Imprimir)
                            .addComponent(btn_ListarNotas)
                            .addComponent(btn_AddProduto))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_Data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_DataAtual)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_RemoverItem)
                        .addComponent(jLabel2)
                        .addComponent(txt_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_Consultar)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Cadastrar)
                    .addComponent(btn_Menu))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CadastrarActionPerformed
        try {
            // Validar data
            if (txt_Data.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, informe a data da nota!");
                return;
            }

            // Validar se há itens na tabela
            DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
            if (dtmItens.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Adicione pelo menos um item à nota!");
                return;
            }

            // Montar a nota
            Nota nota = new Nota();
            nota.setData(java.sql.Date.valueOf(txt_Data.getText().trim()));
            nota.setTipo(rbn_Entrada.isSelected() ? "E" : "S");

            // Cliente ou fornecedor
            if (rbn_Saida.isSelected()) {
                nota.setCliente(listaClientes.get(cmb_Cliente.getSelectedIndex()));
            } else {
                nota.setFornecedor(listaFornecedores.get(cmb_Fornecedor.getSelectedIndex()));
            }

            // Criar lista de itens a partir da tabela
            List<NotaItem> itens = new ArrayList<>();
            for (int i = 0; i < dtmItens.getRowCount(); i++) {
                int produtoId = (int) dtmItens.getValueAt(i, 0);
                int quantidade = (int) dtmItens.getValueAt(i, 3);

                // Buscar produto completo
                Produto produto = listaProdutos.stream()
                        .filter(p -> p.getId() == produtoId)
                        .findFirst()
                        .orElse(null);

                if (produto != null) {
                    NotaItem item = new NotaItem();
                    item.setProduto(produto);
                    item.setQuantidade(quantidade);
                    item.setPreco(produto.getPrecoUnitario());
                    itens.add(item);
                }
            }

            nota.setItens(itens);

            // Salvar no banco
            NotaDAO notaDAO = new NotaDAO();
            notaDAO.inserirNota(nota);

            JOptionPane.showMessageDialog(this, "Nota cadastrada com sucesso!");

            limparCampos();
            limparTabela();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar nota: " + ex.getMessage());
        }

        limparCampos();
        desbloquearCampos();
        verificarTipoNota();
    }//GEN-LAST:event_btn_CadastrarActionPerformed

    //verificar se usaremos a função deletar
    private void btn_DeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeletarActionPerformed
        try {
            int notaId = Integer.parseInt(txt_NotaID.getText().trim());

            int confirma = JOptionPane.showConfirmDialog(this,
                    "Deseja excluir a nota #" + notaId + "?\n\n"
                    + "Excluirá a nota e todos os itens\n"
                    + "Reverterá o estoque dos produtos",
                    "Confirmar Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (confirma == JOptionPane.YES_OPTION) {
                NotaDAO notaDAO = new NotaDAO();
                notaDAO.excluirNota(notaId);
                limparCampos();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir: " + ex.getMessage());
        }
    }//GEN-LAST:event_btn_DeletarActionPerformed

    private void rbn_EntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbn_EntradaActionPerformed
        // Verificar se há itens na tabela antes de permitir mudança
        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        if (dtmItens.getRowCount() > 0) {
            JOptionPane.showMessageDialog(this,
                    "Não é possível alterar o tipo da nota após adicionar itens!\n"
                    + "Limpe a tabela primeiro ou remova todos os itens.");
            // Volta para o estado anterior
            rbn_Saida.setSelected(true);
            return;
        }
        verificarTipoNota();
    }//GEN-LAST:event_rbn_EntradaActionPerformed

    private void rbn_SaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbn_SaidaActionPerformed
        // Verificar se há itens na tabela antes de permitir mudança
        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        if (dtmItens.getRowCount() > 0) {
            JOptionPane.showMessageDialog(this,
                    "Não é possível alterar o tipo da nota após adicionar itens!\n"
                    + "Limpe a tabela primeiro ou remova todos os itens.");
            // Volta para o estado anterior
            rbn_Entrada.setSelected(true);
            return;
        }
        verificarTipoNota();
    }//GEN-LAST:event_rbn_SaidaActionPerformed

    private void btn_DataAtualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DataAtualActionPerformed
        LocalDate hoje = LocalDate.now();
        txt_Data.setText(hoje.toString()); // formato padrão: YYYY-MM-DD
    }//GEN-LAST:event_btn_DataAtualActionPerformed

    private void cmb_ProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ProdutoActionPerformed
        String nomeProduto = (String) cmb_Produto.getSelectedItem();
        if (nomeProduto == null || nomeProduto.isEmpty()) {
            return;
        }

        listaProdutos.stream()
                .filter(p -> p.getNome().equals(nomeProduto))
                .findFirst()
                .ifPresent(p -> txt_Estoque.setText(String.valueOf(p.getEstoque())));
        mostrarEstoqueProdutoSelecionado();
    }//GEN-LAST:event_cmb_ProdutoActionPerformed

    private void btn_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MenuActionPerformed
        Menu menu = new Menu(); // Cria uma nova instância do formulário
        menu.setVisible(true); //abri o forms
        dispose(); //fecha a tela em background
    }//GEN-LAST:event_btn_MenuActionPerformed

    private void btn_ListarNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ListarNotasActionPerformed
        NotasList lista = new NotasList();
        lista.setVisible(true);
        dispose();
    }//GEN-LAST:event_btn_ListarNotasActionPerformed

    private void btn_ConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConsultarActionPerformed
        consultarNotaPorId();

        // Bloquear campos de edição
        rbn_Entrada.setEnabled(false);
        rbn_Saida.setEnabled(false);
        cmb_Produto.setEnabled(false);
        cmb_Cliente.setEnabled(false);
        cmb_Fornecedor.setEnabled(false);
        txt_Data.setEnabled(false);
        txt_Entrada.setEnabled(false);
        txt_Saida.setEnabled(false);
        btn_DataAtual.setEnabled(false);
        btn_AddProduto.setEnabled(false);
        btn_RemoverItem.setEnabled(false);

        // Habilitar apenas funcionalidades de visualização
        btn_Deletar.setEnabled(true);
        btn_Cadastrar.setEnabled(false);
        btn_Imprimir.setEnabled(true);
    }//GEN-LAST:event_btn_ConsultarActionPerformed

    private void btn_LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LimparActionPerformed
        limparCampos();
        desbloquearCampos();
        verificarTipoNota();
        limparTabela();
    }//GEN-LAST:event_btn_LimparActionPerformed

    private void btn_ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ImprimirActionPerformed
        try {
            int notaId = Integer.parseInt(txt_NotaID.getText());

            //buscar dados completos da nota
            NotaDAO notaDAO = new NotaDAO();
            Nota nota = notaDAO.buscarNota(notaId);

            if (nota == null) {
                JOptionPane.showMessageDialog(this, "Nota não encontrada!");
                return;
            }

            //buscar os itens da nota
            NotaItemDAO itemDAO = new NotaItemDAO();
            List<NotaItem> itens = itemDAO.listarItensPorNota(notaId);

            if (itens.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhum item encontrado nesta nota!");
                return;
            }

            // Gerar o PDF com TODOS os itens
            gerarPDFNota(nota, itens);

            JOptionPane.showMessageDialog(this,
                    "PDF gerado com sucesso!\n\n"
                    + "Arquivo: Nota_" + notaId + ".pdf");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao gerar PDF: " + e.getMessage());
            e.printStackTrace();
        }
    }

    //gerando o pdf
    private void gerarPDFNota(Nota nota, List<NotaItem> itens) throws Exception {
        // Define o caminho do arquivo PDF
        String nomeArquivo = "Nota_" + nota.getId() + ".pdf";
        Document document = new Document(PageSize.A4);

        try {
            // Cria o escritor do PDF
            PdfWriter.getInstance(document, new FileOutputStream(nomeArquivo));
            document.open();

            // header
            Font fontTitulo = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
            Font fontSubtitulo = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
            Font fontNormal = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);

            Paragraph titulo = new Paragraph("NOTA FISCAL", fontTitulo);
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.setSpacingAfter(10);
            document.add(titulo);

            // tipo nota
            String tipoNota = nota.getTipo().equals("E") ? "ENTRADA (COMPRA)" : "SAÍDA (VENDA)";
            Paragraph tipo = new Paragraph(tipoNota, fontSubtitulo);
            tipo.setAlignment(Element.ALIGN_CENTER);
            tipo.setSpacingAfter(20);
            document.add(tipo);

            //info nota
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            Paragraph notaNumero = new Paragraph("Nota Nº: " + nota.getId(), fontSubtitulo);
            notaNumero.setSpacingBefore(10);
            document.add(notaNumero);

            Paragraph notaData = new Paragraph("Data: " + sdf.format(nota.getData()), fontNormal);
            notaData.setSpacingAfter(15);
            document.add(notaData);

            //add cliente ou fornecedor
            if (nota.getTipo().equals("E") && nota.getFornecedor() != null) {
                document.add(new Paragraph("Fornecedor:", fontSubtitulo));
                document.add(new Paragraph(nota.getFornecedor().getNome(), fontNormal));
                document.add(new Paragraph("CNPJ: " + nota.getFornecedor().getCnpj(), fontNormal));
                document.add(new Paragraph("Telefone: " + nota.getFornecedor().getTelefone(), fontNormal));
                document.add(new Paragraph("Email: " + nota.getFornecedor().getEmail(), fontNormal));
                document.add(new Paragraph("CEP: " + nota.getFornecedor().getCEP(), fontNormal));
                document.add(new Paragraph("Cidade: " + nota.getFornecedor().getCidade(), fontNormal));
                document.add(new Paragraph("UF: " + nota.getFornecedor().getUF(), fontNormal));
            } else if (nota.getTipo().equals("S") && nota.getCliente() != null) {
                document.add(new Paragraph("Cliente:", fontSubtitulo));
                document.add(new Paragraph(nota.getCliente().getNome(), fontNormal));
                document.add(new Paragraph("Telefone: " + nota.getCliente().getTelefone(), fontNormal));
                document.add(new Paragraph("Email: " + nota.getCliente().getEmail(), fontNormal));
                document.add(new Paragraph("CEP: " + nota.getCliente().getCEP(), fontNormal));
                document.add(new Paragraph("Cidade: " + nota.getCliente().getCidade(), fontNormal));
                document.add(new Paragraph("UF: " + nota.getCliente().getUF(), fontNormal));
            }

            // Título dos produtos
            Paragraph tituloProdutos = new Paragraph("Produtos", fontSubtitulo);
            tituloProdutos.setSpacingBefore(20);
            tituloProdutos.setSpacingAfter(10);
            document.add(tituloProdutos);

            // Tabela de produtos
            PdfPTable tabelaProdutos = new PdfPTable(5); // 5 colunas: Código, Produto, Qtd, Preço Unit., Subtotal
            tabelaProdutos.setWidthPercentage(100);
            tabelaProdutos.setWidths(new float[]{1, 3, 1.5f, 1.5f, 1.5f});

            Font fontHeader = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD, BaseColor.WHITE);

            // Cabeçalho da tabela
            PdfPCell cellHeader;
            String[] headers = {"Código", "Produto", "Quantidade", "Preço Unit.", "Subtotal"};

            for (String header : headers) {
                cellHeader = new PdfPCell(new Phrase(header, fontHeader));
                cellHeader.setBackgroundColor(BaseColor.DARK_GRAY);
                cellHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
                cellHeader.setPadding(5);
                tabelaProdutos.addCell(cellHeader);
            }

            // Adicionar cada item na tabela
            float valorTotal = 0;

            for (NotaItem item : itens) {
                float subtotal = item.getPreco() * item.getQuantidade();
                valorTotal += subtotal;

                // Código
                PdfPCell cell = new PdfPCell(new Phrase(String.valueOf(item.getProduto().getId()), fontNormal));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(5);
                tabelaProdutos.addCell(cell);

                // Nome do produto
                cell = new PdfPCell(new Phrase(item.getProduto().getNome(), fontNormal));
                cell.setPadding(5);
                tabelaProdutos.addCell(cell);

                // Quantidade
                cell = new PdfPCell(new Phrase(String.valueOf(item.getQuantidade()), fontNormal));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(5);
                tabelaProdutos.addCell(cell);

                // Preço unitário
                cell = new PdfPCell(new Phrase(String.format("R$ %.2f", item.getPreco()), fontNormal));
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                cell.setPadding(5);
                tabelaProdutos.addCell(cell);

                // Subtotal
                cell = new PdfPCell(new Phrase(String.format("R$ %.2f", subtotal), fontNormal));
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                cell.setPadding(5);
                tabelaProdutos.addCell(cell);
            }

            document.add(tabelaProdutos);

            // Valor total
            Paragraph totalGeral = new Paragraph(
                    "VALOR TOTAL: R$ " + String.format("%.2f", valorTotal),
                    new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD)
            );
            totalGeral.setAlignment(Element.ALIGN_RIGHT);
            totalGeral.setSpacingBefore(20);
            document.add(totalGeral);

            System.out.println("PDF gerado: " + nomeArquivo);

        } finally {
            if (document != null && document.isOpen()) {
                document.close();
            }
        }
    }//GEN-LAST:event_btn_ImprimirActionPerformed

    private void btn_RemoverItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoverItemActionPerformed
        int linha = tblItensNota.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um item para remover!");
            return;
        }

        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        String nomeProduto = (String) dtmItens.getValueAt(linha, 1);

        int confirma = JOptionPane.showConfirmDialog(this,
                "Deseja remover o item: " + nomeProduto + "?",
                "Confirmar Remoção",
                JOptionPane.YES_NO_OPTION);

        if (confirma == JOptionPane.YES_OPTION) {
            dtmItens.removeRow(linha);
            JOptionPane.showMessageDialog(this, "Item removido!");
            
            // se não houver itens, desbloqueia os radios buttons
            if (dtmItens.getRowCount() == 0) {
                desbloquearTipoNota();
            }
        }
    }//GEN-LAST:event_btn_RemoverItemActionPerformed

    private void btn_AddProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddProdutoActionPerformed
        int quantidade;
        try {
            if (rbn_Entrada.isSelected()) {
                if (txt_Entrada.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Informe a quantidade comprada!");
                    return;
                }
                quantidade = Integer.parseInt(txt_Entrada.getText().trim());
            } else {
                if (txt_Saida.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Informe a quantidade vendida!");
                    return;
                }
                quantidade = Integer.parseInt(txt_Saida.getText().trim());
            }

            if (quantidade <= 0) {
                JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero!");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Informe uma quantidade válida!");
            return;
        }

        // busca objetos diretamente dos combos
        String nomeProduto = (String) cmb_Produto.getSelectedItem();
        Produto produtoSelecionado = listaProdutos.stream() //Converte a lista em um Stream (fluxo de dados) para aplicar operações funcionais.
                .filter(p -> p.getNome().equals(nomeProduto)) //Filtra apenas os produtos que atendem a condição
                .findFirst() //Pega o primeiro elemento que passou no filtro
                .orElse(null);

        // Verificar se produto já está na tabela
        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        for (int i = 0; i < dtmItens.getRowCount(); i++) {
            int codigoNaTabela = (int) dtmItens.getValueAt(i, 0);
            if (codigoNaTabela == produtoSelecionado.getId()) {
                JOptionPane.showMessageDialog(this, "Este produto já foi adicionado à nota!");
                return;
            }
        }

        // Verificar estoque em notas de saída
        if (rbn_Saida.isSelected() && produtoSelecionado.getEstoque() < quantidade) {
            JOptionPane.showMessageDialog(this, String.format(
                    "ESTOQUE INSUFICIENTE!\n\nProduto: %s\nEstoque disponível: %d\nSolicitado: %d",
                    produtoSelecionado.getNome(),
                    produtoSelecionado.getEstoque(),
                    quantidade
            ));
            return;
        }

        // Adicionar na tabela
        Object[] linha = new Object[]{
            produtoSelecionado.getId(),
            produtoSelecionado.getNome(),
            String.format("R$ %.2f", produtoSelecionado.getPrecoUnitario()),
            quantidade
        };

        dtmItens.addRow(linha);

        // Limpar campos do produto
        txt_Entrada.setText("");
        txt_Saida.setText("");
        cmb_Produto.setSelectedIndex(0);

        JOptionPane.showMessageDialog(this, "Item adicionado à nota!");
        // BLOQUEAR OS RADIO BUTTONS APÓS ADICIONAR ITEM
        bloquearTipoNota();
    }//GEN-LAST:event_btn_AddProdutoActionPerformed

    //bloquear a alteração do tipo de nota
    private void bloquearTipoNota() {
        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        if (dtmItens.getRowCount() > 0) {
            rbn_Entrada.setEnabled(false);
            rbn_Saida.setEnabled(false);
        }
    }

    //desbloquear alteração do tipo de nota
    private void desbloquearTipoNota() {
        rbn_Entrada.setEnabled(true);
        rbn_Saida.setEnabled(true);
    }

    // Método genérico para carregar combos
    private <T> void carregarCombo(javax.swing.JComboBox<String> combo, List<T> lista, java.util.function.Function<T, String> getNome) {
        combo.removeAllItems();
        lista.forEach(obj -> combo.addItem(getNome.apply(obj)));
    }

    //entrada ou saida
    private void verificarTipoNota() {
        boolean entradaSelecionada = rbn_Entrada.isSelected();

        txt_Entrada.setEnabled(entradaSelecionada);
        txt_Saida.setEnabled(!entradaSelecionada);
        cmb_Cliente.setEnabled(!entradaSelecionada);
        cmb_Fornecedor.setEnabled(entradaSelecionada);

        if (entradaSelecionada) {
            txt_Saida.setText("");
            lbl_QntdComprada.setEnabled(true);
            cmb_Cliente.setSelectedIndex(-1);
            cmb_Fornecedor.setSelectedIndex(0);
            lbl_QntdVendida.setEnabled(false);
        } else {
            txt_Entrada.setText("");
            lbl_QntdComprada.setEnabled(false);
            cmb_Fornecedor.setSelectedIndex(-1);
            cmb_Cliente.setSelectedIndex(0);
            lbl_QntdVendida.setEnabled(true);
        }
    }

    private void limparCampos() {
        txt_Entrada.setText("");
        txt_Saida.setText("");
        txt_Data.setText("");
        txt_ID.setText("");
        txt_NotaID.setText("");
        if (cmb_Cliente.getItemCount() > 0) {
            cmb_Cliente.setSelectedIndex(0);
        }
        if (cmb_Fornecedor.getItemCount() > 0) {
            cmb_Fornecedor.setSelectedIndex(0);
        }
        if (cmb_Produto.getItemCount() > 0) {
            cmb_Produto.setSelectedIndex(0);
        }
    }

    private void limparTabela() {
        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        dtmItens.setRowCount(0);
        desbloquearTipoNota();
    }

    private void desbloquearCampos() {
        rbn_Entrada.setEnabled(true);
        rbn_Saida.setEnabled(true);
        cmb_Produto.setEnabled(true);
        cmb_Cliente.setEnabled(true);
        cmb_Fornecedor.setEnabled(true);
        txt_Data.setEnabled(true);
        txt_Entrada.setEnabled(true);
        txt_Saida.setEnabled(true);
        btn_DataAtual.setEnabled(true);
        btn_Deletar.setEnabled(true);
        btn_Cadastrar.setEnabled(true);
        btn_AddProduto.setEnabled(true);
        btn_RemoverItem.setEnabled(true);
    }

    //Método para preencher os campos da tela
    public void exibirNotaNosCampos(Nota nota) throws SQLException {
        txt_NotaID.setText(String.valueOf(nota.getId()));
        txt_Data.setText(String.valueOf(nota.getData()));

        if ("E".equals(nota.getTipo())) {
            rbn_Entrada.setSelected(true);
        } else {
            rbn_Saida.setSelected(true);
        }
        verificarTipoNota();

        // Preencher cliente ou fornecedor
        if (nota.getCliente() != null) {
            cmb_Cliente.setSelectedItem(nota.getCliente().getNome());
        } else {
            cmb_Cliente.setSelectedIndex(-1);
        }

        if (nota.getFornecedor() != null) {
            cmb_Fornecedor.setSelectedItem(nota.getFornecedor().getNome());
        } else {
            cmb_Fornecedor.setSelectedIndex(-1);
        }

        // Limpar campos de quantidade (não precisa mostrar nada aqui)
        txt_Entrada.setText("");
        txt_Saida.setText("");
        txt_Estoque.setText("");
        cmb_Produto.setSelectedIndex(-1);
    }

    //att estoque ao cadastrar vice-versa
    private void mostrarEstoqueProdutoSelecionado() {
        try {
            String nomeProduto = (String) cmb_Produto.getSelectedItem();

            if (nomeProduto == null || nomeProduto.isEmpty()) {
                txt_Estoque.setText("—");
                return;
            }

            ProdutoDAO produtoDAO = new ProdutoDAO();
            Produto produtoAtualizado = produtoDAO.buscarProdutoPorNome(nomeProduto);

            if (produtoAtualizado != null) {
                txt_Estoque.setText(String.valueOf(produtoAtualizado.getEstoque()));
            } else {
                txt_Estoque.setText("0");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao mostrar estoque: " + ex.getMessage());
        }
    }

    //Método sem parametro pega o ID digitado, busca no banco, 
    //e depois chama o outro método para preencher, o de cima.
    private void consultarNotaPorId() {
        try {
            String idTexto = txt_ID.getText();
            if (idTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, informe o código da nota para consultar!");
                return;
            }

            int idNota;
            try {
                idNota = Integer.parseInt(idTexto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Código inválido!");
                return;
            }

            NotaDAO notaDAO = new NotaDAO();
            Nota nota = notaDAO.buscarNota(idNota);

            if (nota == null) {
                JOptionPane.showMessageDialog(this, "Nenhuma nota encontrada com o código informado!");
                return;
            }

            exibirNotaNosCampos(nota);
            carregarItensNaTabela(nota.getId());

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao consultar nota: " + ex.getMessage());
        }
    }

    private void carregarItensNaTabela(int notaId) throws SQLException {
        // Limpar tabela
        DefaultTableModel dtmItens = (DefaultTableModel) tblItensNota.getModel();
        dtmItens.setRowCount(0);

        // Buscar itens da nota
        NotaItemDAO itemDAO = new NotaItemDAO();
        List<NotaItem> itens = itemDAO.listarItensPorNota(notaId);

        if (itens.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum item encontrado nesta nota!");
            return;
        }

        // Adicionar cada item na tabela
        for (NotaItem item : itens) {
            Object[] linha = new Object[]{
                item.getProduto().getId(),
                item.getProduto().getNome(),
                String.format("R$ %.2f", item.getPreco()),
                item.getQuantidade()
            };
            dtmItens.addRow(linha);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_AddProduto;
    private javax.swing.JButton btn_Cadastrar;
    private javax.swing.JButton btn_Consultar;
    private javax.swing.JButton btn_DataAtual;
    private javax.swing.JButton btn_Deletar;
    private javax.swing.ButtonGroup btn_GrpTipoNota;
    private javax.swing.JButton btn_Imprimir;
    private javax.swing.JButton btn_Limpar;
    private javax.swing.JButton btn_ListarNotas;
    private javax.swing.JButton btn_Menu;
    private javax.swing.JButton btn_RemoverItem;
    private javax.swing.JComboBox<String> cmb_Cliente;
    private javax.swing.JComboBox<String> cmb_Fornecedor;
    private javax.swing.JComboBox<String> cmb_Produto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_Cliente;
    private javax.swing.JLabel lbl_Estoque;
    private javax.swing.JLabel lbl_Fornecedor;
    private javax.swing.JLabel lbl_Produto;
    private javax.swing.JLabel lbl_QntdComprada;
    private javax.swing.JLabel lbl_QntdVendida;
    private javax.swing.JLabel lbl_TipoNota;
    private javax.swing.JLabel lbl_Titulo;
    private javax.swing.JLabel lbl_TituloTable;
    private javax.swing.JRadioButton rbn_Entrada;
    private javax.swing.JRadioButton rbn_Saida;
    private javax.swing.JTable tblItensNota;
    private javax.swing.JTextField txt_Data;
    private javax.swing.JTextField txt_Entrada;
    private javax.swing.JTextField txt_Estoque;
    private javax.swing.JTextField txt_ID;
    private javax.swing.JTextField txt_NotaID;
    private javax.swing.JTextField txt_Saida;
    // End of variables declaration//GEN-END:variables
}
