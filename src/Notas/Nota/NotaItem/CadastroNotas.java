/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Notas.Nota.NotaItem;

import DAO.ClienteDAO;
import DAO.FornecedorDAO;
import DAO.NotaDAO;
import DAO.ProdutoDAO;
import Menu.Menu;
import Models.Cliente;
import Models.Fornecedor;
import Models.Nota;
import Models.NotaItem;
import Models.Produto;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author 2830482411045
 */
public class CadastroNotas extends javax.swing.JFrame {

    private List<Cliente> listaClientes;
    private List<Fornecedor> listaFornecedores;
    private List<Produto> listaProdutos;

    /**
     * Creates new form CadastroNotas
     */
    public CadastroNotas() {
        initComponents();
        carregarComboCliente();
        carregarComboFornecedor();
        carregarComboProduto();
        verificarTipoNota();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_Menu = new javax.swing.JButton();
        btn_GrpTipoNota = new javax.swing.ButtonGroup();
        lbl_Titulo = new javax.swing.JLabel();
        btn_Menu1 = new javax.swing.JButton();
        lbl_Fornecedor = new javax.swing.JLabel();
        lbl_Cliente = new javax.swing.JLabel();
        cmb_Cliente = new javax.swing.JComboBox<>();
        cmb_Fornecedor = new javax.swing.JComboBox<>();
        rbn_Saida = new javax.swing.JRadioButton();
        rbn_Entrada = new javax.swing.JRadioButton();
        lbl_TipoNota = new javax.swing.JLabel();
        lbl_Produto = new javax.swing.JLabel();
        cmb_Produto = new javax.swing.JComboBox<>();
        lbl_QntdVendida = new javax.swing.JLabel();
        txt_Saida = new javax.swing.JTextField();
        lbl_QntdComprada = new javax.swing.JLabel();
        txt_Entrada = new javax.swing.JTextField();
        btn_Cadastrar = new javax.swing.JButton();
        btn_Atualizar = new javax.swing.JButton();
        btn_Deletar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_Data = new javax.swing.JTextField();
        btn_DataAtual = new javax.swing.JButton();

        btn_Menu.setText("Voltar");
        btn_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MenuActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_Titulo.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lbl_Titulo.setText("Gerenciar Notas");

        btn_Menu1.setText("Voltar");

        lbl_Fornecedor.setText("Fornecedor");

        lbl_Cliente.setText("Cliente");

        cmb_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmb_Fornecedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_GrpTipoNota.add(rbn_Saida);
        rbn_Saida.setText("Sa√≠da");
        rbn_Saida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbn_SaidaActionPerformed(evt);
            }
        });

        btn_GrpTipoNota.add(rbn_Entrada);
        rbn_Entrada.setSelected(true);
        rbn_Entrada.setText("Entrada");
        rbn_Entrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbn_EntradaActionPerformed(evt);
            }
        });

        lbl_TipoNota.setText("Tipo da nota:");

        lbl_Produto.setText("Produto:");

        cmb_Produto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbl_QntdVendida.setText("Quantdade Vendida");

        lbl_QntdComprada.setText("Quantdade Comprada");

        btn_Cadastrar.setText("Cadastrar");
        btn_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CadastrarActionPerformed(evt);
            }
        });

        btn_Atualizar.setText("Atualizar");
        btn_Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AtualizarActionPerformed(evt);
            }
        });

        btn_Deletar.setText("Deletar");
        btn_Deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeletarActionPerformed(evt);
            }
        });

        jLabel1.setText("Data:");

        btn_DataAtual.setText("Data de hoje?");
        btn_DataAtual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DataAtualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_Menu1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(lbl_Titulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_TipoNota)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbn_Entrada)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbn_Saida))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_Fornecedor)
                                    .addComponent(lbl_Cliente)
                                    .addComponent(lbl_Produto))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmb_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(txt_Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lbl_QntdComprada)))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbl_QntdVendida)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_Saida, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_Deletar)
                                .addGap(18, 18, 18)
                                .addComponent(btn_Atualizar)
                                .addGap(18, 18, 18)
                                .addComponent(btn_Cadastrar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_Data, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_DataAtual)))))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lbl_Titulo)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Cliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Fornecedor)
                    .addComponent(cmb_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Produto)
                    .addComponent(cmb_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_TipoNota)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbn_Entrada)
                        .addComponent(rbn_Saida)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_QntdComprada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_QntdVendida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Saida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_DataAtual)
                    .addComponent(txt_Data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Cadastrar)
                    .addComponent(btn_Atualizar)
                    .addComponent(btn_Deletar))
                .addGap(27, 27, 27)
                .addComponent(btn_Menu1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MenuActionPerformed
        Menu menu = new Menu(); // Cria uma nova inst√¢ncia do formul√°rio
        menu.setVisible(true); //abri o forms
        dispose(); //fecha a tela em background
    }//GEN-LAST:event_btn_MenuActionPerformed

    private void btn_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CadastrarActionPerformed
        try {
            // Valida√ß√µes
            if (txt_Data.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, informe a data da nota!");
                return;
            }

            String nomeCliente = (String) cmb_Cliente.getSelectedItem();
            String nomeFornecedor = (String) cmb_Fornecedor.getSelectedItem();
            String nomeProduto = (String) cmb_Produto.getSelectedItem();

            // Buscar objetos completos
            Cliente clienteSelecionado = null;
            if (rbn_Saida.isSelected()) {
                clienteSelecionado = listaClientes.stream()
                        .filter(c -> c.getNome().equals(nomeCliente))
                        .findFirst()
                        .orElse(null);
                
                if (clienteSelecionado == null) {
                    JOptionPane.showMessageDialog(this, "Selecione um cliente v√°lido!");
                    return;
                }
            }

            Fornecedor fornecedorSelecionado = null;
            if (rbn_Entrada.isSelected()) {
                fornecedorSelecionado = listaFornecedores.stream()
                        .filter(f -> f.getNome().equals(nomeFornecedor))
                        .findFirst()
                        .orElse(null);
                
                if (fornecedorSelecionado == null) {
                    JOptionPane.showMessageDialog(this, "Selecione um fornecedor v√°lido!");
                    return;
                }
            }

            Produto produtoSelecionado = listaProdutos.stream()
                    .filter(p -> p.getNome().equals(nomeProduto))
                    .findFirst()
                    .orElse(null);

            if (produtoSelecionado == null) {
                JOptionPane.showMessageDialog(this, "Selecione um produto v√°lido!");
                return;
            }

            // Validar quantidade
            int quantidade = 0;
            try {
                if (rbn_Entrada.isSelected()) {
                    quantidade = Integer.parseInt(txt_Entrada.getText().trim());
                } else {
                    quantidade = Integer.parseInt(txt_Saida.getText().trim());
                }

                if (quantidade <= 0) {
                    JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero!");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, informe uma quantidade v√°lida!");
                return;
            }
            
            // Verificar estoque dispon√≠vel para vendas
            if (rbn_Saida.isSelected()) {
                if (produtoSelecionado.getEstoque() < quantidade) {
                    String msg = String.format(
                        "‚ö†Ô∏è ESTOQUE INSUFICIENTE!\n\n" +
                        "Produto: %s\n" +
                        "Estoque dispon√≠vel: %d unidades\n" +
                        "Quantidade solicitada: %d unidades\n\n" +
                        "Ajuste a quantidade e tente novamente.",
                        produtoSelecionado.getNome(),
                        produtoSelecionado.getEstoque(),
                        quantidade
                    );
                    JOptionPane.showMessageDialog(this, msg, "Estoque Insuficiente", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            // Criar a nota
            Nota nota = new Nota();
            nota.setCliente(clienteSelecionado);
            nota.setFornecedor(fornecedorSelecionado);
            nota.setData(java.sql.Date.valueOf(txt_Data.getText().trim()));
            
            // Definir o tipo da nota: E=Entrada (Compra), S=Sa√≠da (Venda)
            if (rbn_Entrada.isSelected()) {
                nota.setTipo("E"); // Entrada (Compra)
            } else {
                nota.setTipo("S"); // Sa√≠da (Venda)
            }

            // Criar o item da nota
            NotaItem item = new NotaItem();
            item.setProduto(produtoSelecionado);
            item.setQuantidade(quantidade);
            item.setPreco(produtoSelecionado.getPrecoUnitario());

            // Adicionar item √† lista de itens da nota
            List<NotaItem> itens = new ArrayList<>();
            itens.add(item);
            nota.setItens(itens);

            // Salvar no banco
            NotaDAO notaDAO = new NotaDAO();
            notaDAO.inserirNota(nota);

            // Limpar campos ap√≥s sucesso
            limparCampos();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar nota: " + ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage());
        }
    }//GEN-LAST:event_btn_CadastrarActionPerformed

    private void btn_AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AtualizarActionPerformed

    }//GEN-LAST:event_btn_AtualizarActionPerformed

    private void btn_DeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeletarActionPerformed

    }//GEN-LAST:event_btn_DeletarActionPerformed

    private void rbn_EntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbn_EntradaActionPerformed
        verificarTipoNota();
    }//GEN-LAST:event_rbn_EntradaActionPerformed

    private void rbn_SaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbn_SaidaActionPerformed
        verificarTipoNota();
    }//GEN-LAST:event_rbn_SaidaActionPerformed

    private void btn_DataAtualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DataAtualActionPerformed
        LocalDate hoje = LocalDate.now();
        txt_Data.setText(hoje.toString()); // formato padr√£o: YYYY-MM-DD
    }//GEN-LAST:event_btn_DataAtualActionPerformed

    private void carregarComboCliente() {
        try {
            ClienteDAO cDAO = new ClienteDAO();
            listaClientes = cDAO.listarClientes();

            cmb_Cliente.removeAllItems();

            if (listaClientes != null && !listaClientes.isEmpty()) {
                for (Cliente c : listaClientes) {
                    cmb_Cliente.addItem(c.getNome());
                }
            } else {
                cmb_Cliente.addItem("Nenhum cliente cadastrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar clientes: " + e.getMessage());
        }
    }

    private void carregarComboFornecedor() {
        try {
            FornecedorDAO fDAO = new FornecedorDAO();
            listaFornecedores = fDAO.listarFornecedores();

            cmb_Fornecedor.removeAllItems();

            if (listaFornecedores != null && !listaFornecedores.isEmpty()) {
                for (Fornecedor f : listaFornecedores) {
                    cmb_Fornecedor.addItem(f.getNome());
                }
            } else {
                cmb_Fornecedor.addItem("Nenhum fornecedor cadastrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar fornecedores: " + e.getMessage());
        }
    }

    private void carregarComboProduto() {
        try {
            ProdutoDAO pDAO = new ProdutoDAO();
            listaProdutos = pDAO.listarProdutos();

            cmb_Produto.removeAllItems();

            if (listaProdutos != null && !listaProdutos.isEmpty()) {
                for (Produto p : listaProdutos) {
                    cmb_Produto.addItem(p.getNome());
                }
            } else {
                cmb_Produto.addItem("Nenhum produto cadastrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar produtos: " + e.getMessage());
        }
    }

    private void verificarTipoNota() {
        boolean entradaSelecionada = rbn_Entrada.isSelected();

        txt_Entrada.setEnabled(entradaSelecionada);
        txt_Saida.setEnabled(!entradaSelecionada);
        cmb_Cliente.setEnabled(!entradaSelecionada);
        cmb_Fornecedor.setEnabled(entradaSelecionada);

        if (entradaSelecionada) {
            txt_Saida.setText("");
            lbl_QntdComprada.setEnabled(true);
            lbl_QntdVendida.setEnabled(false);
        } else {
            txt_Entrada.setText("");
            lbl_QntdComprada.setEnabled(false);
            lbl_QntdVendida.setEnabled(true);
        }
    }
    
    private void limparCampos() {
        txt_Entrada.setText("");
        txt_Saida.setText("");
        txt_Data.setText("");
        if (cmb_Cliente.getItemCount() > 0) cmb_Cliente.setSelectedIndex(0);
        if (cmb_Fornecedor.getItemCount() > 0) cmb_Fornecedor.setSelectedIndex(0);
        if (cmb_Produto.getItemCount() > 0) cmb_Produto.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Atualizar;
    private javax.swing.JButton btn_Cadastrar;
    private javax.swing.JButton btn_DataAtual;
    private javax.swing.JButton btn_Deletar;
    private javax.swing.ButtonGroup btn_GrpTipoNota;
    private javax.swing.JButton btn_Menu;
    private javax.swing.JButton btn_Menu1;
    private javax.swing.JComboBox<String> cmb_Cliente;
    private javax.swing.JComboBox<String> cmb_Fornecedor;
    private javax.swing.JComboBox<String> cmb_Produto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbl_Cliente;
    private javax.swing.JLabel lbl_Fornecedor;
    private javax.swing.JLabel lbl_Produto;
    private javax.swing.JLabel lbl_QntdComprada;
    private javax.swing.JLabel lbl_QntdVendida;
    private javax.swing.JLabel lbl_TipoNota;
    private javax.swing.JLabel lbl_Titulo;
    private javax.swing.JRadioButton rbn_Entrada;
    private javax.swing.JRadioButton rbn_Saida;
    private javax.swing.JTextField txt_Data;
    private javax.swing.JTextField txt_Entrada;
    private javax.swing.JTextField txt_Saida;
    // End of variables declaration//GEN-END:variables
}
