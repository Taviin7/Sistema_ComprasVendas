/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Notas.Nota.NotaItem;

import DAO.ClienteDAO;
import DAO.FornecedorDAO;
import DAO.NotaDAO;
import DAO.NotaItemDAO;
import DAO.ProdutoDAO;
import Menu.Menu;
import Models.Cliente;
import Models.Fornecedor;
import Models.Nota;
import Models.NotaItem;
import Models.Produto;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author 2830482411045
 */
public class CadastroNotas extends javax.swing.JFrame {

    //para preencher os combos
    private List<Cliente> listaClientes;
    private List<Fornecedor> listaFornecedores;
    private List<Produto> listaProdutos;

    /**
     * Creates new form CadastroNotas
     */
    public CadastroNotas() {
        initComponents();
        carregarComboCliente();
        carregarComboFornecedor();
        carregarComboProduto();
        verificarTipoNota();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_GrpTipoNota = new javax.swing.ButtonGroup();
        lbl_Titulo = new javax.swing.JLabel();
        btn_Menu = new javax.swing.JButton();
        lbl_Fornecedor = new javax.swing.JLabel();
        lbl_Cliente = new javax.swing.JLabel();
        cmb_Cliente = new javax.swing.JComboBox<>();
        cmb_Fornecedor = new javax.swing.JComboBox<>();
        rbn_Saida = new javax.swing.JRadioButton();
        rbn_Entrada = new javax.swing.JRadioButton();
        lbl_TipoNota = new javax.swing.JLabel();
        lbl_Produto = new javax.swing.JLabel();
        cmb_Produto = new javax.swing.JComboBox<>();
        lbl_QntdVendida = new javax.swing.JLabel();
        txt_Saida = new javax.swing.JTextField();
        lbl_QntdComprada = new javax.swing.JLabel();
        txt_Entrada = new javax.swing.JTextField();
        btn_Cadastrar = new javax.swing.JButton();
        btn_Atualizar = new javax.swing.JButton();
        btn_Deletar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_Data = new javax.swing.JTextField();
        btn_DataAtual = new javax.swing.JButton();
        lbl_Estoque = new javax.swing.JLabel();
        txt_Estoque = new javax.swing.JTextField();
        btn_ListarNotas = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_ID = new javax.swing.JTextField();
        btn_Consultar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_NotaID = new javax.swing.JTextField();
        btn_Limpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_Titulo.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lbl_Titulo.setText("Gerenciar Notas");

        btn_Menu.setText("Voltar");
        btn_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MenuActionPerformed(evt);
            }
        });

        lbl_Fornecedor.setText("Fornecedor");

        lbl_Cliente.setText("Cliente");

        cmb_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmb_Fornecedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_GrpTipoNota.add(rbn_Saida);
        rbn_Saida.setText("Saída");
        rbn_Saida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbn_SaidaActionPerformed(evt);
            }
        });

        btn_GrpTipoNota.add(rbn_Entrada);
        rbn_Entrada.setSelected(true);
        rbn_Entrada.setText("Entrada");
        rbn_Entrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbn_EntradaActionPerformed(evt);
            }
        });

        lbl_TipoNota.setText("Tipo da nota:");

        lbl_Produto.setText("Produto:");

        cmb_Produto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmb_Produto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ProdutoActionPerformed(evt);
            }
        });

        lbl_QntdVendida.setText("Quantdade Vendida");

        lbl_QntdComprada.setText("Quantdade Comprada");

        btn_Cadastrar.setText("Cadastrar");
        btn_Cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CadastrarActionPerformed(evt);
            }
        });

        btn_Atualizar.setText("Atualizar");
        btn_Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AtualizarActionPerformed(evt);
            }
        });

        btn_Deletar.setText("Deletar");
        btn_Deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeletarActionPerformed(evt);
            }
        });

        jLabel1.setText("Data:");

        btn_DataAtual.setText("Data de hoje?");
        btn_DataAtual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DataAtualActionPerformed(evt);
            }
        });

        lbl_Estoque.setText("Estoque:");

        btn_ListarNotas.setText("Listar Notas");
        btn_ListarNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ListarNotasActionPerformed(evt);
            }
        });

        jLabel2.setText("Consulta Código:");

        btn_Consultar.setText("Consultar");
        btn_Consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConsultarActionPerformed(evt);
            }
        });

        jLabel3.setText("Código:");

        txt_NotaID.setEditable(false);
        txt_NotaID.setEnabled(false);

        btn_Limpar.setText("Limpar");
        btn_Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(lbl_Titulo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Deletar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Atualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_Limpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_Cadastrar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Data, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_DataAtual)))
                .addContainerGap(206, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(txt_Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(txt_Saida, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(lbl_QntdComprada)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbl_QntdVendida)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_Menu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_ListarNotas))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_TipoNota)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbn_Entrada)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbn_Saida))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_Fornecedor)
                                    .addComponent(lbl_Cliente)
                                    .addComponent(lbl_Produto)
                                    .addComponent(jLabel3))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_NotaID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmb_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbl_Estoque)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_Estoque, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_Consultar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lbl_Titulo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txt_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(btn_Consultar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_NotaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Cliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Fornecedor)
                            .addComponent(cmb_Fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Produto)
                            .addComponent(cmb_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Estoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Estoque))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_TipoNota)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rbn_Entrada)
                                .addComponent(rbn_Saida)))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_QntdComprada)
                    .addComponent(lbl_QntdVendida))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Saida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_DataAtual)
                    .addComponent(txt_Data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Cadastrar)
                    .addComponent(btn_Atualizar)
                    .addComponent(btn_Deletar)
                    .addComponent(btn_Limpar))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Menu)
                    .addComponent(btn_ListarNotas))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_CadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CadastrarActionPerformed
        try {
            // Validações essenciais
            if (txt_Data.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, informe a data da nota!");
                return;
            }

            int quantidade;
            try {
                if (rbn_Entrada.isSelected()) {
                    quantidade = Integer.parseInt(txt_Entrada.getText().trim());
                } else {
                    quantidade = Integer.parseInt(txt_Saida.getText().trim());
                }

                if (quantidade <= 0) {
                    JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero!");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Informe uma quantidade válida!");
                return;
            }

            // busca objetos diretamente dos combos
            String nomeProduto = (String) cmb_Produto.getSelectedItem();
            Produto produtoSelecionado = listaProdutos.stream()
                    .filter(p -> p.getNome().equals(nomeProduto))
                    .findFirst()
                    .orElse(null);

            // verificação do estoque apenas em notas de saída
            if (rbn_Saida.isSelected() && produtoSelecionado.getEstoque() < quantidade) {
                JOptionPane.showMessageDialog(this, String.format(
                        "⚠️ ESTOQUE INSUFICIENTE!\n\nProduto: %s\nEstoque disponível: %d\nSolicitado: %d",
                        produtoSelecionado.getNome(),
                        produtoSelecionado.getEstoque(),
                        quantidade
                ));
                return;
            }

            //montando a nota
            Nota nota = new Nota();
            nota.setData(java.sql.Date.valueOf(txt_Data.getText().trim()));
            nota.setTipo(rbn_Entrada.isSelected() ? "E" : "S");

            //cliente ou fornecedor
            if (rbn_Saida.isSelected()) {
                nota.setCliente(listaClientes.get(cmb_Cliente.getSelectedIndex()));
            } else {
                nota.setFornecedor(listaFornecedores.get(cmb_Fornecedor.getSelectedIndex()));
            }

            //criando o item e adicionando-o
            NotaItem item = new NotaItem();
            item.setProduto(produtoSelecionado);
            item.setQuantidade(quantidade);
            item.setPreco(produtoSelecionado.getPrecoUnitario());

            nota.setItens(List.of(item));

            NotaDAO notaDAO = new NotaDAO();
            notaDAO.inserirNota(nota);
            JOptionPane.showMessageDialog(this, "Nota cadastrada com sucesso!");

            mostrarEstoqueProdutoSelecionado();

            limparCampos();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar nota: " + ex.getMessage());
        }

        limparCampos();
        desbloquearCampos();
        verificarTipoNota();
    }//GEN-LAST:event_btn_CadastrarActionPerformed

    private void btn_AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AtualizarActionPerformed
        try {

            // Obter dados atualizados
            int notaId = Integer.parseInt(txt_NotaID.getText());
            java.sql.Date novaData = java.sql.Date.valueOf(txt_Data.getText());

            int novaQuantidade;
            if (rbn_Entrada.isSelected()) {
                novaQuantidade = Integer.parseInt(txt_Entrada.getText());
            } else {
                novaQuantidade = Integer.parseInt(txt_Saida.getText());
            }

            //Buscar a nota para ter o tipo (E ou S)
            NotaDAO notaDAO = new NotaDAO();
            Nota notaPrincipal = notaDAO.buscarNota(notaId);

            if (notaPrincipal == null) {
                JOptionPane.showMessageDialog(this, "Nota não encontrada!");
                return;
            }

            //atualizando a data da nota
            notaPrincipal.setData(novaData);
            notaDAO.atualizarNota(notaPrincipal);

            //atualizando a quantidade do item
            NotaItemDAO itemDAO = new NotaItemDAO();
            List<NotaItem> itens = itemDAO.listarItensPorNota(notaId);

            if (itens.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhum item encontrado nesta nota!");
                return;
            }

            //item da nota
            NotaItem itemAntigo = itens.get(0);

            //garantindo que o item antigo tenha a referência da nota
            itemAntigo.setNota(notaPrincipal);

            //cópia do item com nova quantidade
            NotaItem itemNovo = new NotaItem();
            itemNovo.setId(itemAntigo.getId());
            itemNovo.setProduto(itemAntigo.getProduto());
            itemNovo.setNota(notaPrincipal); // IMPORTANTE: usar a nota principal
            itemNovo.setQuantidade(novaQuantidade);
            itemNovo.setPreco(itemAntigo.getPreco());

            // att o item (reverte estoque antigo e aplica novo)
            itemDAO.atualizarItem(itemNovo, itemAntigo);

            JOptionPane.showMessageDialog(this,
                    "Nota atualizada com sucesso!\n\n"
                    + "Data: " + novaData + "\n"
                    + "Quantidade: " + novaQuantidade + "\n"
                    + "Estoque ajustado automaticamente!");

            limparCampos();
            desbloquearCampos();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar: " + e.getMessage());
            e.printStackTrace();
        }
        
        limparCampos();
        desbloquearCampos();
        verificarTipoNota();
    }//GEN-LAST:event_btn_AtualizarActionPerformed

    private void btn_DeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeletarActionPerformed
        try {
            int notaId = Integer.parseInt(txt_NotaID.getText().trim());

            int confirma = JOptionPane.showConfirmDialog(this,
                    "Deseja excluir a nota #" + notaId + "?\n\n"
                    + "• Excluirá a nota e todos os itens\n"
                    + "• Reverterá o estoque dos produtos",
                    "Confirmar Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (confirma == JOptionPane.YES_OPTION) {
                NotaDAO notaDAO = new NotaDAO();
                notaDAO.excluirNota(notaId);
                limparCampos();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir: " + ex.getMessage());
        }
    }//GEN-LAST:event_btn_DeletarActionPerformed

    private void rbn_EntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbn_EntradaActionPerformed
        verificarTipoNota();
    }//GEN-LAST:event_rbn_EntradaActionPerformed

    private void rbn_SaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbn_SaidaActionPerformed
        verificarTipoNota();
    }//GEN-LAST:event_rbn_SaidaActionPerformed

    private void btn_DataAtualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DataAtualActionPerformed
        LocalDate hoje = LocalDate.now();
        txt_Data.setText(hoje.toString()); // formato padrão: YYYY-MM-DD
    }//GEN-LAST:event_btn_DataAtualActionPerformed

    private void cmb_ProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ProdutoActionPerformed
        mostrarEstoqueProdutoSelecionado();
    }//GEN-LAST:event_cmb_ProdutoActionPerformed

    private void btn_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MenuActionPerformed
        Menu menu = new Menu(); // Cria uma nova instância do formulário
        menu.setVisible(true); //abri o forms
        dispose(); //fecha a tela em background
    }//GEN-LAST:event_btn_MenuActionPerformed

    private void btn_ListarNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ListarNotasActionPerformed
        NotasList lista = new NotasList();
        lista.setVisible(true);
        dispose();
    }//GEN-LAST:event_btn_ListarNotasActionPerformed

    private void btn_ConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConsultarActionPerformed
        preencherCamposComNota();
        rbn_Entrada.setEnabled(false);
        rbn_Saida.setEnabled(false);
        cmb_Produto.setEnabled(false);
    }//GEN-LAST:event_btn_ConsultarActionPerformed

    private void btn_LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LimparActionPerformed
        limparCampos();
        desbloquearCampos();
        verificarTipoNota();
    }//GEN-LAST:event_btn_LimparActionPerformed

    private void carregarComboCliente() {
        ClienteDAO cDAO = new ClienteDAO();
        listaClientes = cDAO.listarClientes();

        cmb_Cliente.removeAllItems();

        for (Cliente c : listaClientes) {
            cmb_Cliente.addItem(c.getNome());
        }
    }

    private void carregarComboFornecedor() {
        FornecedorDAO fDAO = new FornecedorDAO();
        listaFornecedores = fDAO.listarFornecedores();

        cmb_Fornecedor.removeAllItems();

        for (Fornecedor f : listaFornecedores) {
            cmb_Fornecedor.addItem(f.getNome());
        }
    }

    private void carregarComboProduto() {
        ProdutoDAO pDAO = new ProdutoDAO();
        listaProdutos = pDAO.listarProdutos();

        cmb_Produto.removeAllItems();

        for (Produto p : listaProdutos) {
            cmb_Produto.addItem(p.getNome());
        }
    }

    //estoque
    private void mostrarEstoqueProdutoSelecionado() {
        try {
            String nomeProduto = (String) cmb_Produto.getSelectedItem();

            if (nomeProduto == null || nomeProduto.isEmpty()) {
                txt_Estoque.setText("—");
                return;
            }

            ProdutoDAO produtoDAO = new ProdutoDAO();
            Produto produtoAtualizado = produtoDAO.buscarProdutoPorNome(nomeProduto);

            if (produtoAtualizado != null) {
                txt_Estoque.setText(String.valueOf(produtoAtualizado.getEstoque()));
            } else {
                txt_Estoque.setText("0");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao mostrar estoque: " + ex.getMessage());
        }
    }

    //entrada ou saida
    private void verificarTipoNota() {
        boolean entradaSelecionada = rbn_Entrada.isSelected();

        txt_Entrada.setEnabled(entradaSelecionada);
        txt_Saida.setEnabled(!entradaSelecionada);
        cmb_Cliente.setEnabled(!entradaSelecionada);
        cmb_Fornecedor.setEnabled(entradaSelecionada);

        if (entradaSelecionada) {
            txt_Saida.setText("");
            lbl_QntdComprada.setEnabled(true);
            lbl_QntdVendida.setEnabled(false);
        } else {
            txt_Entrada.setText("");
            lbl_QntdComprada.setEnabled(false);
            lbl_QntdVendida.setEnabled(true);
        }
    }

    private void limparCampos() {
        txt_Entrada.setText("");
        txt_Saida.setText("");
        txt_Data.setText("");
        txt_ID.setText("");
        txt_NotaID.setText("");
        if (cmb_Cliente.getItemCount() > 0) {
            cmb_Cliente.setSelectedIndex(0);
        }
        if (cmb_Fornecedor.getItemCount() > 0) {
            cmb_Fornecedor.setSelectedIndex(0);
        }
        if (cmb_Produto.getItemCount() > 0) {
            cmb_Produto.setSelectedIndex(0);
        }
    }

    private void desbloquearCampos() {
        rbn_Entrada.setEnabled(true);
        rbn_Saida.setEnabled(true);
        cmb_Cliente.setEnabled(true);
        cmb_Fornecedor.setEnabled(true);
        cmb_Produto.setEnabled(true);
    }

    //pega os dados digitados na tela e monta um objeto Nota para enviar ao banco
    private Nota construirNotaDosCampos() {
        try {
            if (txt_Data.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Informe a data da nota!");
                return null;
            }

            String tipo;
            Cliente cliente = null;
            Fornecedor fornecedor = null;

            if (rbn_Entrada.isSelected()) {
                tipo = "E";
                fornecedor = listaFornecedores.get(cmb_Fornecedor.getSelectedIndex());
            } else {
                tipo = "S";
                cliente = listaClientes.get(cmb_Cliente.getSelectedIndex());
            }

            String nomeProduto = (String) cmb_Produto.getSelectedItem();
            Produto produto = listaProdutos.stream()
                    .filter(p -> p.getNome().equals(nomeProduto))
                    .findFirst()
                    .orElse(null);

            int quantidade = rbn_Entrada.isSelected()
                    ? Integer.parseInt(txt_Entrada.getText().trim())
                    : Integer.parseInt(txt_Saida.getText().trim());

            Nota nota = new Nota();
            nota.setData(java.sql.Date.valueOf(txt_Data.getText().trim()));
            nota.setTipo(tipo);
            nota.setCliente(cliente);
            nota.setFornecedor(fornecedor);

            NotaItem item = new NotaItem();
            item.setProduto(produto);
            item.setQuantidade(quantidade);
            item.setPreco(produto.getPrecoUnitario());
            item.setNota(nota); // garante associação

            List<NotaItem> itens = new ArrayList<>();
            itens.add(item);
            nota.setItens(itens);

            return nota;

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao construir nota: " + ex.getMessage());
            return null;
        }
    }

    //Método para preencher os campos da tela
    public void preencherCamposComNota(Nota nota) {
        try {
            txt_Data.setText(nota.getData().toString());
            txt_NotaID.setText(Integer.toString(nota.getId()));
            if ("E".equals(nota.getTipo())) {
                rbn_Entrada.setSelected(true);
            } else {
                rbn_Saida.setSelected(true);
            }
            verificarTipoNota();

            if (nota.getCliente() != null) {
                cmb_Cliente.setSelectedItem(nota.getCliente().getNome());
            }
            if (nota.getFornecedor() != null) {
                cmb_Fornecedor.setSelectedItem(nota.getFornecedor().getNome());

            }

            List<NotaItem> itens = carregarItensComNota(nota);
            nota.setItens(itens);

            if (!itens.isEmpty()) {
                NotaItem primeiroItem = itens.get(0);
                cmb_Produto.setSelectedItem(primeiroItem.getProduto().getNome());
                if ("E".equals(nota.getTipo())) {
                    txt_Entrada.setText(String.valueOf(primeiroItem.getQuantidade()));
                } else {
                    txt_Saida.setText(String.valueOf(primeiroItem.getQuantidade()));
                }
            }

            JOptionPane.showMessageDialog(this, "Nota #" + nota.getId() + " carregada!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar nota: " + ex.getMessage());
        }
    }

    //Método sem parametro pega o ID digitado, busca no banco, 
    //e depois chama o outro método para preencher, o de cima.
    private void preencherCamposComNota() {
        try {
            String idTexto = txt_ID.getText();
            if (idTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, informe o código da nota para consultar!");
                return;
            }

            int idNota;
            try {
                idNota = Integer.parseInt(idTexto);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Código inválido!");
                return;
            }

            NotaDAO notaDAO = new NotaDAO();
            Nota nota = notaDAO.buscarNota(idNota);

            if (nota == null) {
                JOptionPane.showMessageDialog(this, "Nenhuma nota encontrada com o código informado!");
                return;
            }

            preencherCamposComNota(nota);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao consultar nota: " + ex.getMessage());
        }
    }

    private Nota montarNotaParaAtualizacao() throws SQLException {
        //campo de consulta/ID
        int notaId = Integer.parseInt(txt_ID.getText().trim());

        NotaDAO notaDAO = new NotaDAO();

        //busca a nota original (para manter Tipo, Cliente, Fornecedor, etc.)
        Nota notaOriginal = notaDAO.buscarNota(notaId);

        if (notaOriginal == null) {
            throw new SQLException("Nota com ID " + notaId + " não encontrada no banco de dados.");
        }

        //item associado
        NotaItemDAO itemDAO = new NotaItemDAO();
        List<NotaItem> itens = itemDAO.listarItensPorNota(notaId);

        if (itens == null || itens.isEmpty()) {
            throw new SQLException("A nota consultada não possui itens para serem atualizados.");
        }

        //aplica as Alterações
        //nova Data
        java.sql.Date novaData = java.sql.Date.valueOf(txt_Data.getText().trim());
        notaOriginal.setData(novaData);

        //nova qntd no item
        NotaItem unicoItem = itens.get(0);

        String qntdTexto = notaOriginal.getTipo().equals("E")
                ? txt_Entrada.getText().trim()
                : txt_Saida.getText().trim();

        if (qntdTexto.isEmpty()) {
            throw new NumberFormatException("A quantidade não pode ser vazia.");
        }

        int novaQuantidade = Integer.parseInt(qntdTexto);

        if (novaQuantidade <= 0) {
            throw new IllegalArgumentException("A quantidade deve ser maior que zero.");
        }

        unicoItem.setQuantidade(novaQuantidade);

        notaOriginal.setItens(itens);

        return notaOriginal;
    }

    private List<NotaItem> carregarItensComNota(Nota nota) throws SQLException {
        NotaItemDAO itemDAO = new NotaItemDAO();
        List<NotaItem> itens = itemDAO.listarItensPorNota(nota.getId());
        for (NotaItem item : itens) {
            item.setNota(nota); // associa cada item
        }
        return itens;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Atualizar;
    private javax.swing.JButton btn_Cadastrar;
    private javax.swing.JButton btn_Consultar;
    private javax.swing.JButton btn_DataAtual;
    private javax.swing.JButton btn_Deletar;
    private javax.swing.ButtonGroup btn_GrpTipoNota;
    private javax.swing.JButton btn_Limpar;
    private javax.swing.JButton btn_ListarNotas;
    private javax.swing.JButton btn_Menu;
    private javax.swing.JComboBox<String> cmb_Cliente;
    private javax.swing.JComboBox<String> cmb_Fornecedor;
    private javax.swing.JComboBox<String> cmb_Produto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lbl_Cliente;
    private javax.swing.JLabel lbl_Estoque;
    private javax.swing.JLabel lbl_Fornecedor;
    private javax.swing.JLabel lbl_Produto;
    private javax.swing.JLabel lbl_QntdComprada;
    private javax.swing.JLabel lbl_QntdVendida;
    private javax.swing.JLabel lbl_TipoNota;
    private javax.swing.JLabel lbl_Titulo;
    private javax.swing.JRadioButton rbn_Entrada;
    private javax.swing.JRadioButton rbn_Saida;
    private javax.swing.JTextField txt_Data;
    private javax.swing.JTextField txt_Entrada;
    private javax.swing.JTextField txt_Estoque;
    private javax.swing.JTextField txt_ID;
    private javax.swing.JTextField txt_NotaID;
    private javax.swing.JTextField txt_Saida;
    // End of variables declaration//GEN-END:variables
}
